// Code generated by MockGen. DO NOT EDIT.
// Source: link.go

// Package prompt is a generated GoMock package.
package prompt

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockLink is a mock of Link interface.
type MockLink struct {
	ctrl     *gomock.Controller
	recorder *MockLinkMockRecorder
}

// MockLinkMockRecorder is the mock recorder for MockLink.
type MockLinkMockRecorder struct {
	mock *MockLink
}

// NewMockLink creates a new mock instance.
func NewMockLink(ctrl *gomock.Controller) *MockLink {
	mock := &MockLink{ctrl: ctrl}
	mock.recorder = &MockLinkMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLink) EXPECT() *MockLinkMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockLink) Handle(message *ChainMessage) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Handle", message)
}

// Handle indicates an expected call of Handle.
func (mr *MockLinkMockRecorder) Handle(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockLink)(nil).Handle), message)
}

// SetNext mocks base method.
func (m *MockLink) SetNext(next Link) Link {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNext", next)
	ret0, _ := ret[0].(Link)
	return ret0
}

// SetNext indicates an expected call of SetNext.
func (mr *MockLinkMockRecorder) SetNext(next interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNext", reflect.TypeOf((*MockLink)(nil).SetNext), next)
}

// MockStringPrompter is a mock of StringPrompter interface.
type MockStringPrompter struct {
	ctrl     *gomock.Controller
	recorder *MockStringPrompterMockRecorder
}

// MockStringPrompterMockRecorder is the mock recorder for MockStringPrompter.
type MockStringPrompterMockRecorder struct {
	mock *MockStringPrompter
}

// NewMockStringPrompter creates a new mock instance.
func NewMockStringPrompter(ctrl *gomock.Controller) *MockStringPrompter {
	mock := &MockStringPrompter{ctrl: ctrl}
	mock.recorder = &MockStringPrompterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStringPrompter) EXPECT() *MockStringPrompterMockRecorder {
	return m.recorder
}

// Prompt mocks base method.
func (m *MockStringPrompter) Prompt(label string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Prompt", label)
	ret0, _ := ret[0].(string)
	return ret0
}

// Prompt indicates an expected call of Prompt.
func (mr *MockStringPrompterMockRecorder) Prompt(label interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prompt", reflect.TypeOf((*MockStringPrompter)(nil).Prompt), label)
}
