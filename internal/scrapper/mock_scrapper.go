// Code generated by MockGen. DO NOT EDIT.
// Source: scrapper.go

// Package scrapper is a generated GoMock package.
package scrapper

import (
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	html "golang.org/x/net/html"
)

// MockScrapper is a mock of Scrapper interface.
type MockScrapper struct {
	ctrl     *gomock.Controller
	recorder *MockScrapperMockRecorder
}

// MockScrapperMockRecorder is the mock recorder for MockScrapper.
type MockScrapperMockRecorder struct {
	mock *MockScrapper
}

// NewMockScrapper creates a new mock instance.
func NewMockScrapper(ctrl *gomock.Controller) *MockScrapper {
	mock := &MockScrapper{ctrl: ctrl}
	mock.recorder = &MockScrapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScrapper) EXPECT() *MockScrapperMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockScrapper) Execute() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockScrapperMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockScrapper)(nil).Execute))
}

// Find mocks base method.
func (m *MockScrapper) Find(node *html.Node) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", node)
	ret0, _ := ret[0].(error)
	return ret0
}

// Find indicates an expected call of Find.
func (mr *MockScrapperMockRecorder) Find(node interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockScrapper)(nil).Find), node)
}

// Parse mocks base method.
func (m *MockScrapper) Parse(data io.Reader) (*html.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse", data)
	ret0, _ := ret[0].(*html.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parse indicates an expected call of Parse.
func (mr *MockScrapperMockRecorder) Parse(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockScrapper)(nil).Parse), data)
}

// Retrieve mocks base method.
func (m *MockScrapper) Retrieve(url string) (io.Reader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Retrieve", url)
	ret0, _ := ret[0].(io.Reader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Retrieve indicates an expected call of Retrieve.
func (mr *MockScrapperMockRecorder) Retrieve(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Retrieve", reflect.TypeOf((*MockScrapper)(nil).Retrieve), url)
}

// Save mocks base method.
func (m *MockScrapper) Save(data io.Reader, filename string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", data, filename)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockScrapperMockRecorder) Save(data, filename interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockScrapper)(nil).Save), data, filename)
}

// MockRetriever is a mock of Retriever interface.
type MockRetriever struct {
	ctrl     *gomock.Controller
	recorder *MockRetrieverMockRecorder
}

// MockRetrieverMockRecorder is the mock recorder for MockRetriever.
type MockRetrieverMockRecorder struct {
	mock *MockRetriever
}

// NewMockRetriever creates a new mock instance.
func NewMockRetriever(ctrl *gomock.Controller) *MockRetriever {
	mock := &MockRetriever{ctrl: ctrl}
	mock.recorder = &MockRetrieverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRetriever) EXPECT() *MockRetrieverMockRecorder {
	return m.recorder
}

// Retrieve mocks base method.
func (m *MockRetriever) Retrieve(url string) (io.Reader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Retrieve", url)
	ret0, _ := ret[0].(io.Reader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Retrieve indicates an expected call of Retrieve.
func (mr *MockRetrieverMockRecorder) Retrieve(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Retrieve", reflect.TypeOf((*MockRetriever)(nil).Retrieve), url)
}

// MockParser is a mock of Parser interface.
type MockParser struct {
	ctrl     *gomock.Controller
	recorder *MockParserMockRecorder
}

// MockParserMockRecorder is the mock recorder for MockParser.
type MockParserMockRecorder struct {
	mock *MockParser
}

// NewMockParser creates a new mock instance.
func NewMockParser(ctrl *gomock.Controller) *MockParser {
	mock := &MockParser{ctrl: ctrl}
	mock.recorder = &MockParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockParser) EXPECT() *MockParserMockRecorder {
	return m.recorder
}

// Parse mocks base method.
func (m *MockParser) Parse(data io.Reader) (*html.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse", data)
	ret0, _ := ret[0].(*html.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parse indicates an expected call of Parse.
func (mr *MockParserMockRecorder) Parse(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockParser)(nil).Parse), data)
}

// MockFinder is a mock of Finder interface.
type MockFinder struct {
	ctrl     *gomock.Controller
	recorder *MockFinderMockRecorder
}

// MockFinderMockRecorder is the mock recorder for MockFinder.
type MockFinderMockRecorder struct {
	mock *MockFinder
}

// NewMockFinder creates a new mock instance.
func NewMockFinder(ctrl *gomock.Controller) *MockFinder {
	mock := &MockFinder{ctrl: ctrl}
	mock.recorder = &MockFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFinder) EXPECT() *MockFinderMockRecorder {
	return m.recorder
}

// Find mocks base method.
func (m *MockFinder) Find(node *html.Node) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", node)
	ret0, _ := ret[0].(error)
	return ret0
}

// Find indicates an expected call of Find.
func (mr *MockFinderMockRecorder) Find(node interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockFinder)(nil).Find), node)
}

// MockSaver is a mock of Saver interface.
type MockSaver struct {
	ctrl     *gomock.Controller
	recorder *MockSaverMockRecorder
}

// MockSaverMockRecorder is the mock recorder for MockSaver.
type MockSaverMockRecorder struct {
	mock *MockSaver
}

// NewMockSaver creates a new mock instance.
func NewMockSaver(ctrl *gomock.Controller) *MockSaver {
	mock := &MockSaver{ctrl: ctrl}
	mock.recorder = &MockSaverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSaver) EXPECT() *MockSaverMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockSaver) Save(data io.Reader, filename string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", data, filename)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockSaverMockRecorder) Save(data, filename interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockSaver)(nil).Save), data, filename)
}

// MockExecuter is a mock of Executer interface.
type MockExecuter struct {
	ctrl     *gomock.Controller
	recorder *MockExecuterMockRecorder
}

// MockExecuterMockRecorder is the mock recorder for MockExecuter.
type MockExecuterMockRecorder struct {
	mock *MockExecuter
}

// NewMockExecuter creates a new mock instance.
func NewMockExecuter(ctrl *gomock.Controller) *MockExecuter {
	mock := &MockExecuter{ctrl: ctrl}
	mock.recorder = &MockExecuterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExecuter) EXPECT() *MockExecuterMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockExecuter) Execute() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockExecuterMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockExecuter)(nil).Execute))
}
